Code Notes
==========
translation: E06 ref

val bbox = computeBoundingBox(emptyList(), inputPointList)
val bboxBlock = computeBoundingBox(inputBlockList, emptyList())

val pointSpanRow = bbox.maxRow - bbox.minRow
val blockSpanRow = bboxBlock.maxRow - bboxBlock.minRow

val pointSpanCol = bbox.maxCol - bbox.minCol
val blockSpanCol = bboxBlock.maxCol - bboxBlock.minCol

// make sure the block fits inside the point space
if (blockSpanRow > pointSpanRow || blockSpanCol > pointSpanCol) {
    return emptyList()
}

// just do the easy delta here
val rowDelta = bbox.minRow - bboxBlock.minRow + 1
val colDelta = bbox.minCol - bboxBlock.minCol + 1

val newBlock = translateBlockBy(inputBlockList[0], rowDelta, colDelta)

Some cool Gemini created code samples:

ScanMatrixWithThreeByThreeViewport.kt
	fun hasNonZeroRowsAndCols(viewport: List<List<Int>>): Boolean {
		if (viewport.any { row -> row.all { it != 0 } } || // Check rows
			(0..2).any { col -> viewport.all { row -> row[col] != 0 } }) { // Check columns
			return true
		}

checks a 3x3 matrix for all values of non-zero.  I like the (0..2).any concept. Wow!

Grok: various list fill approaches:

If you want to create a list with repeated elements, you can use:
val list = List(4) { 5 }
This creates a list with 4 elements, all initialized to 5.

3. Using MutableList with fill
val mutableList = MutableList(4) { 0 }.apply { fill(5) }

	val minRow = coordinates.minOf { it.first }
	val maxRow = coordinates.maxOf { it.first }
	val minCol = coordinates.minOf { it.second }
	val maxCol = coordinates.maxOf { it.second }

